/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.exascience.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FunctionalAnnotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FunctionalAnnotation\",\"namespace\":\"org.exascience.formats.avro\",\"fields\":[{\"name\":\"annotation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"geneID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String annotation;
  @Deprecated public java.lang.String geneID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FunctionalAnnotation() {}

  /**
   * All-args constructor.
   */
  public FunctionalAnnotation(java.lang.String annotation, java.lang.String geneID) {
    this.annotation = annotation;
    this.geneID = geneID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return annotation;
    case 1: return geneID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: annotation = (java.lang.String)value$; break;
    case 1: geneID = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'annotation' field.
   */
  public java.lang.String getAnnotation() {
    return annotation;
  }

  /**
   * Sets the value of the 'annotation' field.
   * @param value the value to set.
   */
  public void setAnnotation(java.lang.String value) {
    this.annotation = value;
  }

  /**
   * Gets the value of the 'geneID' field.
   */
  public java.lang.String getGeneID() {
    return geneID;
  }

  /**
   * Sets the value of the 'geneID' field.
   * @param value the value to set.
   */
  public void setGeneID(java.lang.String value) {
    this.geneID = value;
  }

  /** Creates a new FunctionalAnnotation RecordBuilder */
  public static org.exascience.formats.avro.FunctionalAnnotation.Builder newBuilder() {
    return new org.exascience.formats.avro.FunctionalAnnotation.Builder();
  }
  
  /** Creates a new FunctionalAnnotation RecordBuilder by copying an existing Builder */
  public static org.exascience.formats.avro.FunctionalAnnotation.Builder newBuilder(org.exascience.formats.avro.FunctionalAnnotation.Builder other) {
    return new org.exascience.formats.avro.FunctionalAnnotation.Builder(other);
  }
  
  /** Creates a new FunctionalAnnotation RecordBuilder by copying an existing FunctionalAnnotation instance */
  public static org.exascience.formats.avro.FunctionalAnnotation.Builder newBuilder(org.exascience.formats.avro.FunctionalAnnotation other) {
    return new org.exascience.formats.avro.FunctionalAnnotation.Builder(other);
  }
  
  /**
   * RecordBuilder for FunctionalAnnotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FunctionalAnnotation>
    implements org.apache.avro.data.RecordBuilder<FunctionalAnnotation> {

    private java.lang.String annotation;
    private java.lang.String geneID;

    /** Creates a new Builder */
    private Builder() {
      super(org.exascience.formats.avro.FunctionalAnnotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.exascience.formats.avro.FunctionalAnnotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.annotation)) {
        this.annotation = data().deepCopy(fields()[0].schema(), other.annotation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geneID)) {
        this.geneID = data().deepCopy(fields()[1].schema(), other.geneID);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FunctionalAnnotation instance */
    private Builder(org.exascience.formats.avro.FunctionalAnnotation other) {
            super(org.exascience.formats.avro.FunctionalAnnotation.SCHEMA$);
      if (isValidValue(fields()[0], other.annotation)) {
        this.annotation = data().deepCopy(fields()[0].schema(), other.annotation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geneID)) {
        this.geneID = data().deepCopy(fields()[1].schema(), other.geneID);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'annotation' field */
    public java.lang.String getAnnotation() {
      return annotation;
    }
    
    /** Sets the value of the 'annotation' field */
    public org.exascience.formats.avro.FunctionalAnnotation.Builder setAnnotation(java.lang.String value) {
      validate(fields()[0], value);
      this.annotation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'annotation' field has been set */
    public boolean hasAnnotation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'annotation' field */
    public org.exascience.formats.avro.FunctionalAnnotation.Builder clearAnnotation() {
      annotation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'geneID' field */
    public java.lang.String getGeneID() {
      return geneID;
    }
    
    /** Sets the value of the 'geneID' field */
    public org.exascience.formats.avro.FunctionalAnnotation.Builder setGeneID(java.lang.String value) {
      validate(fields()[1], value);
      this.geneID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'geneID' field has been set */
    public boolean hasGeneID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'geneID' field */
    public org.exascience.formats.avro.FunctionalAnnotation.Builder clearGeneID() {
      geneID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FunctionalAnnotation build() {
      try {
        FunctionalAnnotation record = new FunctionalAnnotation();
        record.annotation = fieldSetFlags()[0] ? this.annotation : (java.lang.String) defaultValue(fields()[0]);
        record.geneID = fieldSetFlags()[1] ? this.geneID : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
