/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.tmoerman.adam.fx.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Ratio extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ratio\",\"namespace\":\"org.tmoerman.adam.fx.avro\",\"fields\":[{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int rank;
  @Deprecated public int total;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Ratio() {}

  /**
   * All-args constructor.
   */
  public Ratio(java.lang.Integer rank, java.lang.Integer total) {
    this.rank = rank;
    this.total = total;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rank;
    case 1: return total;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rank = (java.lang.Integer)value$; break;
    case 1: total = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rank' field.
   */
  public java.lang.Integer getRank() {
    return rank;
  }

  /**
   * Sets the value of the 'rank' field.
   * @param value the value to set.
   */
  public void setRank(java.lang.Integer value) {
    this.rank = value;
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Integer getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Integer value) {
    this.total = value;
  }

  /** Creates a new Ratio RecordBuilder */
  public static org.tmoerman.adam.fx.avro.Ratio.Builder newBuilder() {
    return new org.tmoerman.adam.fx.avro.Ratio.Builder();
  }
  
  /** Creates a new Ratio RecordBuilder by copying an existing Builder */
  public static org.tmoerman.adam.fx.avro.Ratio.Builder newBuilder(org.tmoerman.adam.fx.avro.Ratio.Builder other) {
    return new org.tmoerman.adam.fx.avro.Ratio.Builder(other);
  }
  
  /** Creates a new Ratio RecordBuilder by copying an existing Ratio instance */
  public static org.tmoerman.adam.fx.avro.Ratio.Builder newBuilder(org.tmoerman.adam.fx.avro.Ratio other) {
    return new org.tmoerman.adam.fx.avro.Ratio.Builder(other);
  }
  
  /**
   * RecordBuilder for Ratio instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ratio>
    implements org.apache.avro.data.RecordBuilder<Ratio> {

    private int rank;
    private int total;

    /** Creates a new Builder */
    private Builder() {
      super(org.tmoerman.adam.fx.avro.Ratio.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.tmoerman.adam.fx.avro.Ratio.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rank)) {
        this.rank = data().deepCopy(fields()[0].schema(), other.rank);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Ratio instance */
    private Builder(org.tmoerman.adam.fx.avro.Ratio other) {
            super(org.tmoerman.adam.fx.avro.Ratio.SCHEMA$);
      if (isValidValue(fields()[0], other.rank)) {
        this.rank = data().deepCopy(fields()[0].schema(), other.rank);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'rank' field */
    public java.lang.Integer getRank() {
      return rank;
    }
    
    /** Sets the value of the 'rank' field */
    public org.tmoerman.adam.fx.avro.Ratio.Builder setRank(int value) {
      validate(fields()[0], value);
      this.rank = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'rank' field has been set */
    public boolean hasRank() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'rank' field */
    public org.tmoerman.adam.fx.avro.Ratio.Builder clearRank() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'total' field */
    public java.lang.Integer getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public org.tmoerman.adam.fx.avro.Ratio.Builder setTotal(int value) {
      validate(fields()[1], value);
      this.total = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'total' field */
    public org.tmoerman.adam.fx.avro.Ratio.Builder clearTotal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Ratio build() {
      try {
        Ratio record = new Ratio();
        record.rank = fieldSetFlags()[0] ? this.rank : (java.lang.Integer) defaultValue(fields()[0]);
        record.total = fieldSetFlags()[1] ? this.total : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
